buildscript {
    repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// This node shouldn't be needed, temp fix
// for forge maven repo move issues.
repositories {
	maven { url = 'https://libraries.minecraft.net/' }
	mavenCentral()
	maven { url = 'https://maven.minecraftforge.net/' }
	maven { url = 'https://maven.enginehub.org/repo/' }
}


archivesBaseName = "openterraingenerator-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
   			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
  			property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }

        data {
  			workingDirectory project.file("run")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', 'openterraingenerator', '--all', '--output', file('src/generated/resources/')

            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies
{	
	minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	compile project(':common:common-util')
	compile project(':common:common-config')
	compile project(':common:common-customobject')
	compile project(':common:common-generator')
	compile project(':common:common-core')
	
	compile ('com.sk89q.worldedit:worldedit-core:7.2.0') {
		exclude group: 'org.yaml'
	}
	
	// We may not need this, remove if so
	compile fg.deobf('com.sk89q.worldedit:worldedit-forge-mc1.16.3:7.2.0')
}

// Process resources on build: set the version in the mods.toml
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	destinationDir = new File(project.buildDir, "distributions")
    classifier = ''
    from
    {
        project(":common:common-util").sourceSets.main.output.files
		project(":common:common-config").sourceSets.main.output.files
		project(":common:common-customobject").sourceSets.main.output.files
		project(":common:common-generator").sourceSets.main.output.files
		project(":common:common-core").sourceSets.main.output.files
    }
    // This fetches the shared resources from root - avoids duplicating the default preset
    from (rootDir)
    {
        include 'resources/**/*'
    }
    manifest {
        attributes([
            "Specification-Title": "openterraingenerator",
            "Specification-Vendor": "Team OTG",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Team OTG",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "otg.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "otg.refmap.json"
}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}